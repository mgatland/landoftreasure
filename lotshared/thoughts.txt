
To Do:
* player attack hurts enemies (server side only)
* later: stop any queue from getting too long.

Architecture notes:

1. The server sends each client a stream of snapshots, showing the state of the world.
	(Currently, projectile info is sent separately - it maybe should be combined into the snapshots)
2. The client displays events with enough delay that it never catches up with the server updates
	(this delay should be determined dynamically)
3. The client does local player movement and damage
4. Client movement is sent to the server - along with the server frame it was viewing when it made that move
5. todo: the server checks validity of client movement
6. The server simulates client movement in 'client-time' and applies damage
7. todo: If this is different from what the client has simulated, tell the client somehow
8. client movement is added to future snapshots, so other players can see it
	(this should be delayed enough that it never catches up and stutters)

Notes:

UDP packets should be kept below 512 bytes of payload to avoid fragmenting, but it doesn't really matter

ROTMG weapon\projectile stats:
sprite
size
particle trail (color, lifetime)
speed
lifetime
Complex motion:
	amplitude
	frequency
	booleans which override the above: wavy, parametric
firing:
  amount of projectiles
  arc gap between each
flags:
  multihit
  armour piercing?
  ignores obstacles

Enemies can fire: straight at players, or prediction-aimed

http://www.pfiffel.com/dps/

ROTMG has around 800 enemy types

ROTMG enemy scripts have states with transitions. Inside a state are behaviours:
* shoot, range:3, cooldown:2.5
* follow, range:1, speed: 0.85
* wander, speed:0.4,