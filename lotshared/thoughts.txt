
To Do:

* player-projectile collisions
* simulate local player movement
* player attacks, killing enemies, syncing this
* later: stop any queue from getting too long.

Architecture notes:

1. The server sends each client a stream of snapshots, showing the state of the world.
	(Currently, projectile info is sent separately - it maybe should be combined into the snapshots)
2. The client displays events with enough delay that it never catches up with the server updates
	(this delay should be determined dynamically)
3. Client movement is sent to the server - along with the server frame it was viewing when it made that move
4. todo: client movement is simulated on the client
5. todo: the server checks validity of client movement and applies damage from projectiles
	(later, simulate this all on the client too?)
6. client movement is added to future snapshots, so other players can see it
	(this should be delayed enough that it never catches up and stutters)

Notes:

UDP packets should be kept below 512 bytes of payload to avoid fragmenting, but it doesn't really matter

ROTMG weapon\projectile stats:
sprite
size
particle trail (color, lifetime)
speed
lifetime
Complex motion:
	amplitude
	frequency
	booleans which override the above: wavy, parametric
firing:
  amount of projectiles
  arc gap between each
flags:
  multihit
  armour piercing?
  ignores obstacles

Enemies can fire: straight at players, or prediction-aimed


http://www.pfiffel.com/dps/